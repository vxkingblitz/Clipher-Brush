services:
  # Frontend Vue.js
  frontend:
    build: ./frontend
    ports:
      - "8080:8080"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build: ./api_gateway
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - AUTH_SERVICE_URL=http://auth-service:8001
      - IMAGE_SERVICE_URL=http://image-service:8002
      - PROFILE_SERVICE_URL=http://profile-service:8003
      - STORAGE_SERVICE_URL=http://storage-service:8004
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - auth-service
      - image-service
      - profile-service
      - storage-service
      - redis
    volumes:
      - ./api_gateway:/app
    restart: unless-stopped

  # Auth Service
  auth-service:
    build: ./auth_service
    ports:
      - "8001:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://cliper_user:cliper_pass@auth-db:5432/auth_db
    depends_on:
      - auth-db
    volumes:
      - ./auth_service:/app
    restart: unless-stopped

  # Image Processing Service
  image-service:
    build: ./image_processing
    ports:
      - "8002:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://cliper_user:cliper_pass@image-db:5432/image_db
      - REDIS_URL=redis://redis:6379/1
      - STORAGE_SERVICE_URL=http://storage-service:8004
    depends_on:
      - image-db
      - redis
      - storage-service
    volumes:
      - ./image_processing:/app
    restart: unless-stopped

  # User Profile Service
  profile-service:
    build: ./user_profile
    ports:
      - "8003:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://cliper_user:cliper_pass@profile-db:5432/profile_db
      - AUTH_SERVICE_URL=http://auth-service:8001
      - STORAGE_SERVICE_URL=http://storage-service:8004
    depends_on:
      - profile-db
      - auth-service
      - storage-service
    volumes:
      - ./user_profile:/app
    restart: unless-stopped

  # File Storage Service
  storage-service:
    build: ./file_storage
    ports:
      - "8004:8000"
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://cliper_user:cliper_pass@storage-db:5432/storage_db
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=cliper-bush
      - AWS_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - storage-db
      - minio
    volumes:
      - ./file_storage:/app
    restart: unless-stopped

  # Databases for each service
  auth-db:
    image: postgres:13
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=cliper_user
      - POSTGRES_PASSWORD=cliper_pass
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  image-db:
    image: postgres:13
    environment:
      - POSTGRES_DB=image_db
      - POSTGRES_USER=cliper_user
      - POSTGRES_PASSWORD=cliper_pass
    volumes:
      - image_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  profile-db:
    image: postgres:13
    environment:
      - POSTGRES_DB=profile_db
      - POSTGRES_USER=cliper_user
      - POSTGRES_PASSWORD=cliper_pass
    volumes:
      - profile_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  storage-db:
    image: postgres:13
    environment:
      - POSTGRES_DB=storage_db
      - POSTGRES_USER=cliper_user
      - POSTGRES_PASSWORD=cliper_pass
    volumes:
      - storage_db_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Redis for caching and Celery
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    restart: unless-stopped

  # Nginx as reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
      - frontend
    restart: unless-stopped

volumes:
  auth_db_data:
  image_db_data:
  profile_db_data:
  storage_db_data:
  minio_data: